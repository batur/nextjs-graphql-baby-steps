import prisma from "./prisma";
import SchemaBuilder from "@pothos/core";
import PrismaPlugin from "@pothos/plugin-prisma";
//@ts-ignore - this is generated by the prisma plugin
import type { PrismaTypes } from "@pothos/plugin-prisma/generated";
import { ApolloClient, InMemoryCache } from "@apollo/client";

const builder = new SchemaBuilder<{
  PrismaTypes: PrismaTypes.default;
}>({
  plugins: [PrismaPlugin],
  prisma: {
    client: prisma,
  },
});

builder.queryType({
  fields: (t) => ({
    ok: t.boolean({
      resolve: () => true,
    }),
  }),
});

builder.prismaObject("User", {
  fields: (t) => ({
    id: t.exposeID("id"),
    email: t.exposeString("email", { nullable: true }),
    name: t.exposeString("name", { nullable: true }),
  }),
});

builder.queryField("users", (t) =>
  t.prismaField({
    type: ["User"],
    resolve: (query) => prisma.user.findMany({ ...query }),
  })
);

const schema = builder.toSchema();

const apolloClient = new ApolloClient({
  uri: "/api/graphql",
  cache: new InMemoryCache(),
});

const graphql = {
  builder,
  schema,
  apolloClient,
};

export default graphql;
